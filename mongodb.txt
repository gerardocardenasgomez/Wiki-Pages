====MongoDB====

[[Managing Records (MongoDB)]]\\

====MongoDB Data Types====

There are a few basic data types for MongoDB:

null        : {"x" : null}\\
boolean     : {"y" : true}\\
number      : {"a" : 3.14, "b" : 4, "c" : NumberInt("3"), "d" : NumberLong("4")}\\
string      : {"x" : "This is a string"}\\
date        : {"y" : new Date()}\\
regex       : {"x" : /foobar/i}\\
array       : {"y" : ["a", "b", "c"]}\\
embedded doc: {"x" : {"foo", "bar"}}\\
object id   : {"y" : ObjectId()}\\
binary data : {"x" : Binary(data)}\\
code        : {"y" : function() { ''<js code here'' }\\

====ObjectId====

===Structure===

Each ObjectId is 12 bytes long:

| 0 1 2 3 | 4 5 6 | 7 8 | 9 10 11 |
| Timestamp| Machine| PID | Increment |

Certain MongoDB drivers will allow you to query for the Timestamp data in an ObjectId.

It's important to note that the Timestamp field does not need to be synchronized across all machines in a cluster. It is a field that only needs to be new and incremental.

The Machine field is a hash of the machine's hostname.

The PID field is the PID of the ObjectId-generating process.

Combined, the different fields allow for 16,777,216 different ObjectIds to be generated per second. 

====Multi-threading in MongoDB====

Certain operations affect multiple documents. Operations like a multi-update have a single thread for the entire operation and every update is performed one after the other in sequence. However, the threads will occasionally yield to other threads in order to allow other operations to affect the same documents. MongoDB does lock a document when it is performing a write operation on it, and this is done to ensure that a read/write operation will not work on a document that has only been half updated.

====Data with an Expiration Period====

It is possible to configure MongoDB to automatically delete documents after a specified amount of time. For this, create an index with ''createdAt'' set to 1 and ''expireAfterSeconds'' set to the number of seconds before the data is removed from the collection:

<code>
> db.data.createIndex({"createdAt" : 1}, {"expireAfterSeconds": 45})
> db.data.insert({"createdAt": new Date(), "name" : "geardo", "commitMessage" : "hey there"})
> db.data.find()
{ "_id" : ObjectId("552d4eac4f0c78aef8b75224") }
{ "_id" : ObjectId("552d4ec74f0c78aef8b75225"), "createdAt" : ISODate("2015-04-14T17:30:47.888Z"), "name" : "geardo", "commitMessage" : "hey there" }
> db.data.find()
{ "_id" : ObjectId("552d4eac4f0c78aef8b75224") }
</code>

====Indexing====

To ensure that a field is indexed: 

<code>
db.users.ensureIndex({"username" : 1})
</code>

There is a limit of 64 indexes per collection because the index has to be updated whenever data in the collection changes. Fields that are queried regularly should be indexed, whereas fields that are rarely indexed should not be indexed. For example, "username", "birthday", etc. are fields that should be indexed because they might be queried daily.

===Compound Indexes===

Compound indexes are useful for things like sorting, and it is also done with ''ensureIndex()'':

<code>
db.users.ensureIndex({"age" : 1, "username" : 1})
</code>

That compound index would greatly increase the performance of the following query:

<code>
db.users.find({"age" : {"$gte" : 20, "$lte" : 30}})
</code>

The index now contains a sorted "table" starting with the lowest age and ending with the highest age, and with the age field linked to the corresponding user. So a query for a set of 21 year olds is easy because the index is already sorted.

Note that listing "username" first is different:

<code>
db.users.ensureIndex({"username" : 1, "age" : 1})
</code>

Now the sorted index is sorting based on usernames, not age. So querying for ages would be less efficient.

===Indexing Embedded Documents===

You can index a document that is embedded in another by using dot notation. In this example, we have documents similar to this one:

<code>
{
    "username" : "sid",
    "loc" : {
        "ip" : "1.2.3.4",
        "city" : "Springfield",
        "state" : "NY"
    }
}
</code>

And we can create an index with the following command:

<code>
db.users.ensureIndex({"loc.city" : 1})
</code>

It's possible to go into lower levels than this. Just continue to add fields.

Another thing to note about embedded documents is that an index of an embedded document is only useful for queries that search for that entire document with the keys in the same order. 

===Indexing Arrays===

It's possible to index arrays by using dot notation. The only caveat is that an index of an array field will create a new index "field" for each one of the array elements. So if a post contains an array of comments, then each element of the array is given its own field in the index as if each comment were a separate key. This could lead to an index that's larger than expected. It's not possible to index an entire array as its own entity in the index. Each element of the array must always get their own field. 
