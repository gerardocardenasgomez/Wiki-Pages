=====Ansible=====

Ansible uses SSH to control hosts. It only needs to be installed on the server(s) that will be used for managing other hosts, and no additional software is required on the target hosts (aside from SSH). 

Custom scripts can be written in any language, but Ansible is written using Python and uses yaml.

====Defining Hosts====

A host can be defined in the ''/etc/ansible/hosts'' with however many parameters are necessary, using hostnames or IP addresses:

<file - hosts>
www01.intranet.mydomain.net
10.25.1.56
db1.example.org ansible_ssh_host=104.236.7.72 ansible_ssh_user=root
</file>

You can also create hostgroups in the ''hosts'' file:

<file - hosts>
[dbservers]
db1.example.org
db2.example.org

[mongoservers]
db1.example.org
</file>

====Managing Hosts with Ansible====

Check that a host is accessible by Ansible:

<code>
[user@server ~]$ ansible -m ping db1.example.org --ask-vault-pass
Vault password: 
db1.example.org | success >> {
    "changed": false, 
    "ping": "pong"
}
</code>

Run a command on multiple servers, using regular expressions:

<code>
[user@data ~]$ ansible db* -a "uptime" --ask-vault-pass
Vault password: 
db2.server.org | success | rc=0 >>
 10:49:28 up 11 days, 23:34,  1 user,  load average: 0.00, 0.00, 0.00

db1.server.org | success | rc=0 >>
 10:49:28 up 11 days, 23:35,  1 user,  load average: 0.00, 0.00, 0.00
</code>

Run a more complicated command using the ''shell'' module so piping is supported, and specifying hosts with a hostgroup:

<code>
[user@data ansible]$ ansible webservers -m shell -a "top -b -n 1 | sed -n '7,17p'" --ask-vault-pass
Vault password: 
db2.server.org | success | rc=0 >>
  PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND                
    1 root      20   0 19232 1508 1228 S  0.0  0.3   0:07.02 init                   
    2 root      20   0     0    0    0 S  0.0  0.0   0:00.00 kthreadd               
    3 root      RT   0     0    0    0 S  0.0  0.0   0:00.00 migration/0            
    4 root      20   0     0    0    0 S  0.0  0.0   0:00.24 ksoftirqd/0            
    5 root      RT   0     0    0    0 S  0.0  0.0   0:00.00 stopper/0              
    6 root      RT   0     0    0    0 S  0.0  0.0   0:03.44 watchdog/0             
    7 root      20   0     0    0    0 S  0.0  0.0   2:31.83 events/0               
    8 root      20   0     0    0    0 S  0.0  0.0   0:00.00 cgroup                 
    9 root      20   0     0    0    0 S  0.0  0.0   0:00.00 khelper                
   10 root      20   0     0    0    0 S  0.0  0.0   0:00.00 netns    

db1.server.org | success | rc=0 >>
  PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND                
25237 root      20   0 99.0m 4396 3300 S  3.9  0.9   0:00.08 sshd                   
    1 root      20   0 19232 1500 1228 S  0.0  0.3   0:18.16 init                   
    2 root      20   0     0    0    0 S  0.0  0.0   0:00.00 kthreadd               
    3 root      RT   0     0    0    0 S  0.0  0.0   0:00.00 migration/0            
    4 root      20   0     0    0    0 S  0.0  0.0   0:00.83 ksoftirqd/0            
    5 root      RT   0     0    0    0 S  0.0  0.0   0:00.00 stopper/0              
    6 root      RT   0     0    0    0 S  0.0  0.0   0:04.88 watchdog/0             
    7 root      20   0     0    0    0 S  0.0  0.0   3:54.77 events/0               
    8 root      20   0     0    0    0 S  0.0  0.0   0:00.00 cgroup                 
    9 root      20   0     0    0    0 S  0.0  0.0   0:00.00 khelper
</code>

====Ansible with Vault====

Ansible now has a Vault feature, which is used to encrypt host information such as SSH passwords. The data you want to encrypt must be stored inside the ''/etc/ansible/host_vars/'' directory in files named after the hosts to you want to apply the information to, e.g. 

For example:
<code>
-rw-r--r-- 1 root root 484 Jun  4 12:53 db1.example.org
-rw-r--r-- 1 root root 484 Jun  4 12:55 db2.example.org
</code>

<file - db1.example.org>
ansible_ssh_pass: "my_secret_pass"
</file>

By default, the files are encrypted using AES. 

To create an encrypted file, use ''ansible-vault create <filename>''\\
To encrypt an existing file, use ''ansible-vault encrypt <filename(s)>''\\
To edit an encrypted file, use ''ansible-vault edit <filename>''\\

Re-keying files:

''ansible-vault rekey <file(s)>''

You will be asked for the old password and the new password to use. This can be used to mass-share files without having to also share the Vault password.