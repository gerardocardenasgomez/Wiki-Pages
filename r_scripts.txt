====R Scripting Examples====

====Histogram with a Rug====

First import the data:

<code>
pollution <- read.csv("./data/avgpm25.csv", colClasses = c("numeric", "character", "factor", "numeric", "numeric"))
> head(pollution)
       pm25  fips region longitude latitude
1  9.771185 01003   east -87.74826 30.59278
2  9.993817 01027   east -85.84286 33.26581
3 10.688618 01033   east -87.72596 34.73148
4 11.337424 01049   east -85.79892 34.45913
5 12.119764 01055   east -86.03212 34.01860
6 10.827805 01069   east -85.35039 31.18973
</code>

Secondly, create the histogram and then add a rug to it:

<code>
> summary(pollution$pm25)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  3.383   8.549  10.050   9.836  11.360  18.440 
> boxplot(pollution$pm25, col= "blue")
> hist(pollution$pm25, col="green")
> rug(pollution$pm25)
</code>

That will produce this: http://i.imgur.com/Fe4mWt3.png

The histogram can be modified using breaks:

<code>
> hist(pollution$pm25, col="green", breaks = 100)
</code>

==Counting the number of values in a data table==

<code>
library(plyr)
idahoFile <- read.table("/home/excom/data/idaho.csv", sep=",", header=TRUE)
count(idahoFile, vars="VAL")    # count function comes from the plyr package

   VAL freq
1    1   75
2    2   42
3    3   33
4    4   30
5    5   26
6    6   29
7    7   23
8    8   70
9    9   99
10  10  119
11  11  152
12  12  199
13  13  233
14  14  495
15  15  483
16  16  486
17  17  357
18  18  502
19  19  232
20  20  312
21  21  164
22  22  159
23  23   47
24  24   53
25  NA 2076
</code>

==Performing sum analysis on an XLS dataset==

<code>
library(xlsx)

> colIndex <- 7:15
> rowIndex <- 18:23
> gasData <- read.xlsx("/home/excom/data/gas.xlsx", sheetIndex=1,header=TRUE,colIndex=colIndex, rowIndex=rowIndex)
> head(gasData)
    Zip CuCurrent PaCurrent PoCurrent      Contact Ext          Fax email Status
1 74136         0         1         0 918-491-6998   0 918-491-6659    NA      1
2 30329         1         0         0 404-321-5711  NA         <NA>    NA      1
3 74136         1         0         0 918-523-2516   0 918-523-2522    NA      1
4 80203         0         1         0 303-864-1919   0         <NA>    NA      1
5 80120         1         0         0 345-098-8890 456         <NA>    NA      1

sum(gasData$Zip*gasData$Ext,na.rm=T)
</code>

==Performing sum analysis on an XML dataset==

<code>
doc <- xmlTreeParse("/home/excom/data/restaurants.xml", useInternal=TRUE)
rootNode <- xmlRoot(doc)
data <- xpathSApply(rootNode,"//zipcode",xmlValue)    # Get the values for the "zipcode" data

> count(data)
        x freq
1  -21226    1
2   21201  136
3   21202  201
4   21205   27
5   21206   30
6   21207    4
7   21208    1
8   21209    8
9   21210   23
10  21211   41
11  21212   28
12  21213   31
13  21214   17
14  21215   54
15  21216   10
</code>

==Create a Subset Using Grepl==

The ''cards'' dataset contains a ''Type'' column. Some cards may only be of one type, such as "Instant," but some cards are a combination of different types, such as "Enchantment Creature." In order to find the cards that are of any ''Type'' "Creature," use ''grepl''

<code>
cardsList <- subset(cards, grepl("Creature", cards$Type))
</code>

==Generating Samples==

Using the card example from the previous section, we can generate samples of the ''cards'' dataset. First, we get a sample of 7 cards to simulate drawing a hand:

<code>
> cards[sample(nrow(cards), 7),]
                   Name                         Type Converted Colorless Red White Attk Def
44    Oreskos Sun Guide          Creature - Cat Monk         2         1   0     1    2   2
38 Harvestguard Alseids Enchantment Creature - Nymph         3         2   0     1    2   3
45  God-Favored General     Creature - Human Soldier         2         1   0     1    1   1
21               Plains                         Land         0         0   0     0    0   0
43     Mortal Obstinacy           Enchantment - Aura         1         0   0     1    0   0
34    Dictate of Heliod                  Enchantment         5         3   0     2    0   0
40        Font of Vigor                  Enchantment         2         1   0     1    0   0
</code>

Next, we generate a sample of 1 to simulate drawing a card at the beginning of a turn:

<code>
> cards[sample(nrow(cards), 1),]
                  Name                     Type Converted Colorless Red White Attk Def
23 Borderland Marauder Creature - Human Warrior         2         1   1     0    1   2
</code>

==Creating a custom ggplot Graph==

Continuing with the previous ''cards'' example, we now create a bar graph that will show the converted costs for the cards in our deck, and also have a different bar color for the two types of cards, red and white.

Result: http://imgur.com/ygObvxV

<code>
> ggplot(cardsConverted, aes(x=Name, y=Converted, fill=(cardsConverted$White > 0)))+geom_bar(position="dodge",stat="identity") + theme(axis.text.x=element_text(angle = 90, vjust = 0.5)) + scale_fill_discrete(name="White Card")
</code>

The ''ggplot'' function is what will ultimately create the graph. ''aes'' maps the variables to the graph. In this case, ''cardsConverted$White > 0'' is used so that cards are grouped by their "White" cost. In this case, cards that are White-based will have a White mana cost greater than zero. ''theme'' is used so that the names of the cards are displayed vertically rather than horizontally, otherwise they would overlap each other and render the field useless. ''scale_fill_discrete'' is used to rename the legend title. Without this, the legend title would be "cardsConverted$White > 0".