=====Perl Examples=====

====Regular Expressions====

===Regular Expressions as Variables===

Sometimes it increases the readability of a program if you put a regular expression into a variable:

<code perl>
#!/usr/bin/env perl

$regex = '\s+';

$line = "The     sun is rising.";
@words = split($regex, $line);

print "@words\n";
</code>

In this example, using ''split(/ /, $line)'' instead might cause unexpected results because the resulting array would contain values consisting of empty strings. The regular expression ''\s+'' would get around the issue of multiple spaces and produce the right output. Additionally, for readability, the regular expression is first stored in ''$regex'' but note that the expression has to use single quotes, and not double quotes.

When using match variables, the parentheses must go inside the variable:

<code perl>
#!/usr/bin/env perl
#

$regex = '\s+';
$wordmatch = '([T|t]he)';

$line = "The     sun is rising.";
@words = split($regex, $line);

foreach $phrase (@words) {
    if ($phrase =~ $wordmatch) {
        print "$phrase matches! at $1\n";
    } else {
        print "$phrase does not match.much sad.\n";
    }
}
</code>

That code would print a "The" on the first match. Using ''($phrase =~ ($wordmatch))'' instead would not produce the proper output because ''$1'' would be empty.

====Color text====

This example will use color text as well as the built-in variables for part of the string before a regular expression match, and post-match:

<code perl>
#!/usr/bin/env perl
use Term::ANSIColor;

while (<>) {
    if ($_ =~ /(^o)/g) {
        printf $`;

        print color 'bold red';
        printf "$1";

        print color 'reset';
        print $';
    }
}
</code>

The regular expression is in ''($_ =~ /(^o)/g)''. The ''/g'' has the effect of saving the position of the regular expression match, which can later be used with ''pos($_)''. Although that was not necessary here. ''$`'' contains the substring before the regular expression match, and ''$%%'%%'' contains everything after the match. ''print color %%'%%<color>%%'%%;'' has the effect of adding color to the text.

====The Diamond Operator====

Files used in this section:

<code>
[user@www1-server-org crap]$ cat betty
onebetety
twobetty
[user@www1-server-org crap]$ cat fred
onefred
twofrd
threefred
[user@www1-server-org crap]$ cat intest.pl
#!/usr/bin/env perl

while (defined($line = <>)) {
    chomp($line);
    print "It was $line that I saw!\n";
}
</code>

The diamond operator, ''<>'', is used to process input. Without any arguments, a perl script would process input from the standard input stream. With arguments, the perl script would go through each file and process the data:

<code>
[user@www1-server-org crap]$ ./intest.pl betty fred
It was onebetety that I saw!
It was twobetty that I saw!
It was onefred that I saw!
It was twofrd that I saw!
It was threefred that I saw!
</code>

Adding a dash will change what data perl will process:

<code>
[user@www1-server-org crap]$ ./intest.pl betty fred -
It was onebetety that I saw!
...
It was threefred that I saw!
this is typed from input stream
It was this is typed from input stream that I saw!
</code>

The line ''this is typed from input stream'' is coming from the standard input stream. The data can also be piped or redirected:

<code>
[user@www1-server-org crap]$ echo "hello echo" | ./intest.pl betty fred -
It was onebetety that I saw!
...
It was threefred that I saw!
It was hello echo that I saw!
[user@www1-server-org crap]$ ./intest.pl < fred
It was onefred that I saw!
It was twofrd that I saw!
It was threefred that I saw!
</code>

====Accepting Switches====

Use the ''-s'' switch to accept variables from the command-line:

<code>
user minimal $: cat opt_cars.pl
#!/usr/bin/perl -s

print "$car is the vehicle.\n";
print "$color is the color of the vehicle.\n";
user minimal $: ./opt_cars.pl -car='bmw' -color='blue'
bmw is the vehicle.
blue is the color of the vehicle.
</code>

Using double dashes (''--'') will not work for these purposes.

It's also possible to set a variable to True or False by not assigning a value to it:

<code>
user minimal $: cat opt_cars.pl
#!/usr/bin/perl -s

print "$car is the vehicle.\n";
print "$color is the color of the vehicle.\n";

if ($data) {
    print "data is enabled\n";
}
user minimal $: ./opt_cars.pl -car='bmw' -color='blue' -data
bmw is the vehicle.
blue is the color of the vehicle.
data is enabled
</code>

It's important to note that switched must come before filenames, otherwise Perl will interpret the switches as filenames.

Switches can be combined with the logical ''or'' to create default values for a variable:

<code>
user minimal $: cat opt_cars.pl
#!/usr/bin/perl -s

print "$car is the vehicle.\n";
print "$color is the color of the vehicle.\n";

$price or $price = 5;
print "$price\n";
user minimal $: ./opt_cars.pl -car='bmw' -color='blue' -price=15
bmw is the vehicle.
blue is the color of the vehicle.
15
user minimal $: ./opt_cars.pl -car='bmw' -color='blue'
bmw is the vehicle.
blue is the color of the vehicle.
5
</code>

The logical ''or'' will only execute the second statement if the first one is false. Therefore, when ''$price'' is set with a switch, the second statement is not executed.

=====Perl One-Liners=====

Let's make some fun Perl one-liners!

====Printing filenames that match a regex pattern====

Use the ''$ARGV'' scalar which contains the name of the file that was most recently processed.

<code>
user ~ $: perl -ne '/system/ and print "$ARGV\n" and close ARGV;' *.txt
apache.txt
apt.txt
centos.txt
</code>

''ARGV'' contains the file-handle for the currently open file. It must be closed so that Perl does not continue searching in the file; if it continued to search, and found another match, the same file name would be printed again.

====Embedded pattern-match modifiers====

It is possible to include embedded patter-match modifiers. This is most useful when it's more work to include modifying options into scripts, as in this case:

<code perl>
# snip
$regex = shift @ARGV;
# snip
if ($_ =~ $regex) {
#snip
}
</code>

When the user tries to insert modifiers, nothing is returned:

<code bash>
user@server:~/Scripts/lookup$ ./recursive-search.pl /advanced/i dict/ wiki/
user@server:~/Scripts/lookup$
</code>

But with embedded modifiers:

<code bash>
user@server:~/Scripts/lookup$ ./recursive-search.pl '(?i)advanced' dict/ wiki/
[wiki/apt.txt 1]: ====Advanced Package Tool (APT)====
</code>

The modifiers are in the form of ''(?<modifiers>)'' and many modifiers can be used such as 'm' and 'l'. Including a minus sign (''-'') will turn off the modifier.

It's also possible to enable modifiers for a portion of the search: ''( (?i) pets) and more'':

<code bash>
user@server:~/Scripts/lookup$ ./recursive-search.pl '((?i)advanced package) Tool' dict/ wiki/
[wiki/apt.txt 1]: ====Advanced Package Tool (APT)====
</code>

====Search and replace with capture groups====

Sometimes you want to modify a portion of a line if it fits a certain pattern, but otherwise you want to print it as it is. We will process the 'output.txt' file:

<file output.txt>
charles,IL,chicago
jane,tx,austin
mcael,NV,vegas
stan,ca,los angeles
</file>

Our Perl one-liner is going to print the line if the state initials are already capitalized, otherwise it will change the initials to uppercase and then print the line.

<code bash>
user Scripts $: cat output.txt | perl -ne 'print if s/,([a-z]{2}),/,\U$1\E,/ || /,[A-Z]{2},/'
charles,IL,chicago
jane,TX,austin
mcael,NV,vegas
stan,CA,los angeles
</code>

We use the OR operator ''||'' to print the lines that are already formatted properly.

====Using Perl to find and modify lines of text====

In this example, we have a CSV file with a name and a number. There are a few things we want to do; the first is to filter out names that start with a certain letter; next, we want to modify how the data is going to be formatted; finally, we want accounts that have more than $1,000 in them.

The ''names.txt'' file:

<file names.txt>
james,12314
jones,09852
jane,8045
jasmine,918401
carmen,1901
tod,293401
chad,123
sophie,194
saul,104
sammy,5001
</file>

Next, we start using Perl to accomplish the tasks we need:

<code perl>
$: perl -ne 'if (/^(s)(\w+),(\d+)/) {print "\U$1\E$2 - \$$3\n";}' names.txt
Sophie - $194
Saul - $104
Sammy - $5001
</code>

We first filter out only the names that start with the letter S. We use ''\U'' and ''\E'' to capitalize the first letter of the name because it was not capitalized in the file. Next, we separate the name from the dollar value and add a dollar sign to the number. This is all done using named groups--Perl by default will make the named groups accessible using the format ''$<num>''.

Next, we use history expansion to search for names that start with the letter J:

<code perl>
$: !!:s/(s)/(j)/
perl -ne 'if (/^(j)(\w+),(\d+)/) {print "\U$1\E$2 - \$$3\n";}' names.txt
James - $12314
Jones - $09852
Jane - $8045
Jasmine - $918401
</code>

Here, we notice a mistake in the data! One of the numbers has a leading zero. If we want to filter this out, we can:

<code perl>
$: perl -ne 'if (/^(j)(\w+),(\d+)/) {$name = "\U$1\E$2"; $money = $3; if ($money =~ /^(0+)([1-9]+)/) {$money=$2};print "$name - \$$money\n";}' names.txt
James - $12314
Jones - $9852
Jane - $8045
Jasmine - $918401
</code>

First, we assign the name and money to the ''$name'' and ''$money'' variables. This is done so that the second use of regular expressions does not overwrite these values when there is a match. Next, we use regular expressions again to catch numbers that begin with a zero. That part is placed into a capture group, and so is the next set of numbers. The proper set of numbers can now be extruded and placed into the ''$money'' variable. This pattern will not catch values that are only 0s.

There are more things you can do to make the output easier to read. But at this point, it would be better to create a small script rather than do everything in one line.
