Link to a long list of awk one-liners: http://www.pement.org/awk/awk1line.txt

====Fun Linux Commands====

===find command with pruning and printf formatting===

Find command that uses ''-mtime'', ''-not'', and ''-prune'' to filter results. ''-printf'' is used to format the output.
<code>find / -not \( -path /sys -prune \) -not \( -path /var/lib -prune \) -not \( -path /var/cache -prune \) -type f -mtime -7 -printf "%Tj %M %n %u %g %8s %8Tx %.8TX %p\n" 2> /dev/null</code>

----

Find command that searches for files that match the pattern ''*.txt'' OR ''.cfg'' using the ''-o'' option.
<code>find / -type f \( -name *.txt \) -o \( -name *.cfg \)</code>

===RSync to another host using SSH===

<code>rsync --rsh=ssh file1 file2 ... host:destination_dir</code>
Setting the RSYNC_RSH environment variable to ssh will make it so that you no longer have to specify ''--rsh=ssh''
==NOTE==
> For remote transfers, a modern rsync uses ssh for its communications, but it may have been  configured  to  use  a different  remote  shell  by default, such as rsh or remsh.
-- (from ''man rsync'')
----
String of commands that pluck out the 11th line in a set of data, sorts them, counts the number of instances of the sorted results, and then creates an average of the number of occurrences:
<code>
awk -F, '{print $11}' poker-hand-testing.data | sort | uniq -c | awk '{ total = 1000000; avg = ($1 / total) * 100; print avg, $2}'
</code>

With 1,000,000 records as input: 
<code>
ubuntu@ip-172-31-27-58:~/data$ head poker-hand-testing.data
1,1,1,13,2,4,2,3,1,12,0
3,12,3,2,3,11,4,5,2,5,1
1,9,4,6,1,4,3,2,3,9,1
1,4,3,13,2,13,2,1,3,6,1
3,10,2,7,1,2,2,11,4,9,0
1,3,4,5,3,4,1,12,4,6,0
2,6,4,11,2,3,4,9,1,7,0
3,2,4,9,3,7,4,3,4,5,0
4,4,3,13,1,8,3,9,3,10,0
1,9,3,8,4,4,1,7,3,5,0
</code>

The result is as such:
<code>
50.1209 0
42.2498 1
4.7622 2
2.1121 3
0.3885 4
0.1996 5
0.1424 6
0.023 7
0.0012 8
0.0003 9
</code>

The output can also be formatted using ''printf'' instead:
<code>
awk '{ total = 1000000; avg = ($1 / total) * 100; printf "%5.2f, %2d\n", avg, $2}'
</code>

For the result of:
<code>
50.12,  0
42.25,  1
 4.76,  2
 2.11,  3
 0.39,  4
 0.20,  5
 0.14,  6
 0.02,  7
 0.00,  8
 0.00,  9
</code>

===Print a file without the first and last lines===

A simple ''sed'' command will accomplish this:

<code>
sed '1d;$d' file.txt
</code>

The ''d'' part in the command is for deletion, the semi-colon is to separate commands, and the ''$'' refers to the last line in the file. Thus, Line 1 delete; Last line dete. 

===Properly formatted date for backups===

Using the ''date'' command:

<code>
[user@server ~]$ date +%Y%m%d%H
2015022419
</code>

  * **''+''** starts the formatting options
  * **%Y** for year, e.g. 2015
  * **%m** for month, e.g. 01..12
  * **%d** for day of month, e.g. 01..31
  * **%H** for hour of day, e.g. 01..23

====Special Combinations====

===Mass Searching with Filenames and Line Number Output===

Using ''ls'' with two special flags: ''-d'' to print full paths, and ''-1'' to print one item per line.\\
Using ''xargs'' to execute a command on each line that comes in from ''ls''\\
Using a Perl one liner to search for text in the line of a file, and print the line number, file name, and line contents if there's a regular expression match.

<code>
ls -d -1 ./* /etc/* | xargs perl -ne 'while(<>){print "[$. $ARGV]: $_" if /server/; $.=0 if eof}'
</code>

In the Perl one-liner, a number of things are done. The diamond (''<>'') operator is the current file handle. ''$.'' is the current line number. ''$_'' contains the current contents of the line in the file. ''/server/'' is the regular expression that Perl will look for. ''$.=0 if eof'', ''eof'' in this case will return a ''1'' when the end of the file has been reached. Once the end of the file has been reached, it sets ''$.'' back to zero. This is necessary because Perl will otherwise continue to increment the number between files, rendering the output rather useless.

===Getting the top 10 commands, sorted by CPU usage===

''top'' in batch mode (''-b'') executed once (''-n 1''), using ''sed'' to print lines 7-17 (''%%'%%7,17p%%'%%'') to filter out the fluff from top and print the top 10 commands, sorted by CPU usage.
<code>top -b -n 1 | sed -n '7,17p'</code>

===Print a list of usernames and their login shells===

''awk'' with the '$NF' built-in variable, which returns the total number of columns in a line.

<code>
[user@server ~]$ cat /etc/passwd | awk -F: '{print $1 " : " $NF}'
root : /bin/bash
bin : /sbin/nologin
daemon : /sbin/nologin
</code>

===Print disk usage by directory, and only if the directory is using 1+ Gb of space===

A lot of directories only use a few Mb of space, and it's more useful to find out which ones are using more than a Gb.

<code>
[user@server ~]$ du -h --max-depth=3 / 2> /dev/null | perl -ne 'print if /^\d\.?\d?G/'
1.3G	/var/lib/pgsql
1.4G	/var/lib
1.5G	/var
3.1G	/
</code>